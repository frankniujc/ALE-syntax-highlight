<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Frank Niu</string>
	<key>bundleUUID</key>
	<string>EB590797-FBEE-4BEA-A140-8339AFD2CE1B</string>
	<key>comment</key>
	<string>ALE syntax highlight</string>
	<key>fileTypes</key>
	<array>
		<string>pl</string>
		<string>plt</string>
	</array>
	<key>name</key>
	<string>ale</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#goal_macro_body</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#goal_call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#statement</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ale</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment.line.note.notation.ale</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(%+)\s*(BUG|FIXME|TODO).*$</string>
					<key>name</key>
					<string>comment.line.note.ale</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ale</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(%+).*$</string>
					<key>name</key>
					<string>comment.line.number-sign.ale</string>
				</dict>
			</array>
		</dict>
		<key>constant</key>
		<dict>
			<key>match</key>
			<string>\b(true|bot|top)\b</string>
			<key>name</key>
			<string>constant.language.ale</string>
		</dict>
		<key>cut</key>
		<dict>
			<key>match</key>
			<string>(!)</string>
			<key>name</key>
			<string>keyword.other.cut.ale</string>
		</dict>
		<key>empty_category</key>
		<dict>
			<key>begin</key>
			<string>(empty)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.empty.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>empty.decalaration.end.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>empty.decalaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>feature</key>
		<dict>
			<key>begin</key>
			<string>([[:alpha:]_][[:alnum:]_]*)\s*(:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>feature.separator.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(,|]|\.|\b))</string>
			<key>name</key>
			<string>feature.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>goal_call</key>
		<dict>
			<key>begin</key>
			<string>([[:alpha:]_][[:alnum:]_]*)(?=(\())</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>goal.call.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>goal_macro_body</key>
		<dict>
			<key>begin</key>
			<string>(macro|if|:-)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\.</string>
			<key>name</key>
			<string>goal-macro.body.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cut</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>goal_macro_declaration</key>
		<dict>
			<key>begin</key>
			<string>([[:alpha:]_][[:alnum:]_]*)(?=(\())</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(macro|if|:-))</string>
			<key>name</key>
			<string>goal-macro.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter_declaration</string>
				</dict>
			</array>
		</dict>
		<key>grammar_rule</key>
		<dict>
			<key>begin</key>
			<string>([[:alpha:]_][[:alnum:]_]*)\s+(rule)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.macro.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>grammar-rule.declaration.end.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>grammar-rule.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#grammar_rule_body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#grammar_rule_head</string>
				</dict>
			</array>
		</dict>
		<key>grammar_rule_body</key>
		<dict>
			<key>begin</key>
			<string>(cat&gt;|sem_head&gt;|goal&gt;|sem_goal&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(cat&gt;|sem_head&gt;|goal&gt;|sem_goal&gt;|\.))</string>
			<key>name</key>
			<string>grammar-rule.body.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>grammar_rule_head</key>
		<dict>
			<key>begin</key>
			<string>\b</string>
			<key>end</key>
			<string>(===&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>grammar-rule.head.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>included_type</key>
		<dict>
			<key>match</key>
			<string>\b(\w+)\b</string>
			<key>name</key>
			<string>constant.other.atom.simple.ale</string>
		</dict>
		<key>lexical_entry</key>
		<dict>
			<key>begin</key>
			<string>('?[\w|\\']+'?)\s+(---&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.atom.simple.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>lexical-entry.declaration.end.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>lexical-entry.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>macro_call</key>
		<dict>
			<key>begin</key>
			<string>(\@)([[:alpha:]_][[:alnum:]_]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.macro.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>macro.call.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>parameter_declaration</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))\s+(?=(macro|if|:-))</string>
			<key>name</key>
			<string>parameter.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#macro_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>statement</key>
		<dict>
			<key>begin</key>
			<string>(?=([[:alpha:]_][[:alnum:]_]*))</string>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>statement.end.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>statement.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#lexical_entry</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_macro_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#goal_macro_body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#grammar_rule</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#empty_category</string>
				</dict>
			</array>
		</dict>
		<key>type</key>
		<dict>
			<key>match</key>
			<string>\b(\w+)\b</string>
			<key>name</key>
			<string>type.name.ale</string>
		</dict>
		<key>type_declaration</key>
		<dict>
			<key>begin</key>
			<string>([[:alpha:]_][[:alnum:]_]*)\s+(?=(sub|intro))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>type.declaration.end.ale</string>
				</dict>
			</dict>
			<key>name</key>
			<string>type.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_sub_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_intro_declaration</string>
				</dict>
			</array>
		</dict>
		<key>type_intro_declaration</key>
		<dict>
			<key>begin</key>
			<string>(intro)\s+(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>type.intro.declaration.end.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>name</key>
			<string>type.intro.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#feature</string>
				</dict>
			</array>
		</dict>
		<key>type_sub_declaration</key>
		<dict>
			<key>begin</key>
			<string>(sub)\s+(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function.ale</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>type.sub.declaration.end.ale</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>name</key>
			<string>type.sub.declaration.ale</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#included_type</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>match</key>
			<string>\b([A-Z]\w*)\b</string>
			<key>name</key>
			<string>variable.parameter.uppercase.ale</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ale</string>
	<key>uuid</key>
	<string>11B0273F-0284-4483-B17B-4B8D0A9294CC</string>
</dict>
</plist>
