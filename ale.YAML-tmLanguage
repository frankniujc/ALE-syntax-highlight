comment: ALE syntax highlight
name: ale_test
scopeName: source.ale
fileTypes: [pl, plt]
uuid: 11B0273F-0284-4483-B17B-4B8D0A9294CC

patterns:

- name: trale-item.ale
  include: '#trale_item'

- name: list.ale
  include: '#list'

- include: '#comments'

- name: lexical-entry.ale
  comment: Lexical entries
  begin: ('?[\w|\\']+'?\s+)(--->)
  beginCaptures:
    '1': {name: constant.other.atom.simple.ale}
    '2': {name: keyword.control.ale}
  end: (\.)
  endCaptures:
    '1': {name: punctuation.definition.arguments.end.ale}
  patterns:
    - include: '#trale_item'
    - include: '#type_value'
    - include: '#single_feature_type'
    - include: '#single_feature_variable'
    - include: '#single_feature_list'

- name: lex-rule.ale
  comment: Lexical rule
  begin: ([[:alpha:]_][[:alnum:]_]*)\s+(lex_rule)
  beginCaptures:
    '1': {name: entity.name.function.ale}
    '2': {name: storage.type.function.ale}
  end: (\.)
  endCaptures:
    '1': {name: punctuation.definition.arguments.end.ale}
  patterns:
    - name: storage.type.function
      match: \b(\*\*>|morphs|if|becomes)\b
    - include: '#comments'
    - include: '#variable'
    - include: '#goal_calling'
    - include: '#trale_item'
    - include: '#list'
    - include: '#trale_item'
    - include: '#type_value'
    - include: '#single_feature_type'
    - include: '#single_feature_variable'
    - include: '#single_feature_list'

- name: semantics.ale
  match: (semantics)\s+(\w+)\.
  captures:
    '1': {name: keyword.declaration.semantics.ale}
    '2': {name: entity.name.function.ale}

- name: type.definition.ale
  comment: Defining types
  begin: (\w+)\s+(?=(sub|intro))
  beginCaptures:
    '1': {name: entity.name.function.ale}
  end: (\.)
  endCaptures:
    '1': {name: punctuation.definition.parameters.begin.ale}
  patterns:
  - contentName: type.definition.sublist.ale
    begin: \b(sub)\b\s+\[
    beginCaptures:
      '1': {name: storage.type.function}
    end: \]
    patterns:
    - include: '#type_list_item'
  - contentName: type.definition.intro.ale
    begin: \b(intro)\b\s+\[
    beginCaptures:
      '1': {name: storage.type.function}
    end: \]
    patterns:
    - include: '#single_feature_variable'
    - include: '#single_feature_type'
    - include: '#single_feature_list'
    - include: '#comments'

- name: phrase-rule.ale
  comment: Phrase rule
  begin: ([[:alpha:]_][[:alnum:]_]*)\s+(rule)
  beginCaptures:
    '1': {name: entity.name.function.ale}
    '2': {name: storage.type.function.ale}
  end: (\.)
  endCaptures:
    '1': {name: punctuation.definition.arguments.end.ale}
  patterns:
    - include: '#trale_item'
    - include: '#comments'
    - include: '#goal_calling'
    - include: '#single_feature_variable'
    - include: '#single_feature_type'
    - include: '#single_feature_list'
    - name: storage.type.struct.ale
      match: \b(cat|goal|sem_head)\b>|===>


- include: '#goal_calling'

- name: goal.definition.ale
  comment: Defining goals
  begin: \s*(if|:-)\s+
  beginCaptures:
    '1': {name: storage.type.function.ale}
  end: (\.)
  endCaptures:
    '1': {name: punctuation.definition.parameters.begin.ale}
  patterns:
  - contentName: goal.name.ale
    patterns:
    - include: '#goal_calling'
    - include: '#constants'
    - include: '#comments'

repository:
  goal_calling:
    name: goal.call.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)\s*(?=(\())
    beginCaptures:
      '1': {name: entity.name.function.ale}
    end: (\))
    endCaptures:
      '1': {name: punctuation.definition.arguments.end.ale}
    patterns:
    - contentName: meta.function-call.arguments.ale
      begin: (\()
      beginCaptures:
        '1': {name: punctuation.definition.arguments.begin.ale}
      end: (?=(\)))
      endCaptures:
        '1': {name: punctuation.definition.arguments.end.ale}
      patterns:
      - include: '#trale_item'
      - include: '#single_feature_variable'
      - include: '#single_feature_type'
      - include: '#single_feature_list'
      - include: '#feature'
      - include: '#variable'
      - include: '#list'
      - include: '#type_value'


  type_list_item:
    name: constant.other.atom.simple.ale
    match: \w+

  feature_list_item:
    match: (\w+)\s*(:)\s*(\w+)
    captures:
      '1': {name: variable.parameter.ale}
      '2': {name: punctuation.separator.annotation.ale}
      '3': {name: support.type.ale}

  trale_item:
    begin: (\()
    end: (\))
    patterns:
      - include: '#single_feature_variable'
      - include: '#single_feature_type'
      - include: '#single_feature_list'
      - include: '#feature'
      - include: '#variable'
      - include: '#list'
      - include: '#type_value'

  type_value:
    patterns:
    - match: (\w+)
      captures:
        '1': {name: meta.generic-name.ale}

  variable:
    match: \b[A-Z]\w*
    name: variable.parameter.uppercase.ale

  feature:
    begin: (\w+)\s*(:)\s*\(
    beginCaptures:
      '1': {name: support.type.ale}
      '2': {name: punctuation.separator.annotation.ale}
    end: (\))
    patterns:
      - include: '#single_feature_variable'
      - include: '#single_feature_type'
      - include: '#single_feature_list'
      - include: '#feature'
      - include: '#variable'
      - include: '#type_value'

  single_feature_type:
    match: (\w+)\s*(:)\s*(\w+)
    captures:
      '1': {name: support.type.ale}
      '2': {name: punctuation.separator.annotation.ale}
      '3': {name: meta.generic-name.ale}

  single_feature_variable:
    match: (\w+)\s*(:)\s*(\b[A-Z]\w*)
    captures:
      '1': {name: support.type.ale}
      '2': {name: punctuation.separator.annotation.ale}
      '3': {name: variable.parameter.uppercase.ale}

  single_feature_list:
    begin: (\w+)\s*(:)\s*(\[)
    beginCaptures:
      '1': {name: support.type.ale}
      '2': {name: punctuation.separator.annotation.ale}
      '3': {name: punctuation.definition.list.begin.ale}
    end: (\])
    endCaptures:
      '1': {name: punctuation.definition.list.end.ale}

    patterns:
    - match: (\,|\|)
      name: punctuation.separator.parameters.ale
    - include: '#single_feature_variable'
    - include: '#single_feature_type'
    - include: '#single_feature_list'
    - include: '#feature'
    - include: '#variable'
    - include: '#list'
    - include: '#type_value'

  list:
    begin: (\[)
    beginCaptures:
      '1': {name: punctuation.definition.list.begin.ale}
    end: (\])
    endCaptures:
      '1': {name: punctuation.definition.list.end.ale}
    patterns:
    - match: (\,|\|)
      name: punctuation.separator.parameters.ale
    - include: '#single_feature_variable'
    - include: '#single_feature_type'
    - include: '#single_feature_list'
    - include: '#feature'
    - include: '#variable'
    - include: '#list'
    - include: '#type_value'

  comments:
    patterns:
    - name: comment.line.note.ale
      match: (%+)\s*(BUG|FIXME|TODO).*$
      captures:
        '1': {name: punctuation.definition.comment.ale}
        '2': {name: comment.line.note.notation.ale}
    - name: comment.line.number-sign.ale
      match: (%+).*$
      captures:
        '1': {name: punctuation.definition.comment.ale}

  constants:
    name: constant.language.ale
    match: \b(true|bot|top)\b

author: Frank Niu
bundleUUID: EB590797-FBEE-4BEA-A140-8339AFD2CE1B