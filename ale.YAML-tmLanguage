comment: ALE syntax highlight
name: ale
scopeName: source.ale
fileTypes: [pl, plt]
uuid: 11B0273F-0284-4483-B17B-4B8D0A9294CC

patterns:

- include: '#comments'

- include: '#goal_macro_body'

# This is actually a prolog function call
- include: '#goal_call'

- include: '#statement'

repository:
  statement:
    name: statement.ale
    begin: (?=([[:alpha:]_][[:alnum:]_]*))
    end: (\.)
    endCaptures:
      '1': {name: statement.end.ale}
    patterns:
    - include: '#type_declaration'
    - include: '#lexical_entry'
    - include: '#goal_macro_declaration'
    - include: '#goal_macro_body'
    - include: '#grammar_rule'
    - include: '#empty_category'

  empty_category:
    name: empty.decalaration.ale
    begin: (empty)
    beginCaptures:
      '1': {name: keyword.control.empty.ale}
    end: (\.)
    endCaptures:
      '1': {name: empty.decalaration.end.ale}
    patterns:
    - include: '#comments'
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  grammar_rule:
    name: grammar-rule.declaration.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)\s+(rule)
    beginCaptures:
      '1': {name: keyword.control.macro.ale}
      '2': {name: entity.name.function.ale}
    end: (\.)
    endCaptures:
      '1': {name: grammar-rule.declaration.end.ale}
    patterns:
    - include: '#grammar_rule_body'
    - include: '#grammar_rule_head'

  grammar_rule_head:
    name: grammar-rule.head.ale
    begin: \b
    end: (===>)
    endCaptures:
      '1': {name: keyword.control.ale}
    patterns:
    - include: '#comments'
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  grammar_rule_body:
    name: grammar-rule.body.ale
    begin: (cat>|sem_head>|goal>|sem_goal>)
    beginCaptures:
      '1': {name: keyword.control.ale}
    end: (?=(cat>|sem_head>|goal>|sem_goal>|\.))
    patterns:
    - include: '#comments'
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  lexical_entry:
    name: lexical-entry.declaration.ale
    begin: ('?[\w|\\']+'?)\s+(--->)
    beginCaptures:
      '1': {name: constant.other.atom.simple.ale}
      '2': {name: keyword.control.ale}
    end: (\.)
    endCaptures:
      '1': {name: lexical-entry.declaration.end.ale}
    patterns:
    - include: '#comments'
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  macro_call:
    name: macro.call.ale
    begin: (\@)([[:alpha:]_][[:alnum:]_]*)
    beginCaptures:
      '1': {name: keyword.control.macro.ale}
      '2': {name: entity.name.function.ale}
    end: (\))
    patterns:
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  goal_call:
    name: goal.call.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)(?=(\())
    beginCaptures:
      '1': {name: entity.name.function.ale}
    end: (\))
    patterns:
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  goal_macro_declaration:
    name: goal-macro.declaration.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)(?=(\())
    beginCaptures:
      '1': {name: support.function.ale}
    end: (?=(macro|if|:-))
    patterns:
    - include: '#parameter_declaration'

  parameter_declaration:
    name: parameter.declaration.ale
    begin: (\()
    end: (\))\s+(?=(macro|if|:-))
    patterns:
    - include: '#macro_call'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  goal_macro_body:
    name: goal-macro.body.ale
    begin: (macro|if|:-)
    beginCaptures:
      '1': {name: keyword.declaration.function.ale}
    end: \.
    patterns:
    - include: '#macro_call'
    - include: '#goal_call'
    - include: '#constant'
    - include: '#cut'
    - include: '#variable'
    - include: '#feature'
    - include: '#type'

  variable:
    match: \b([A-Z]\w*)\b
    name: variable.parameter.uppercase.ale
    

  type_declaration:
    name: type.declaration.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)\s+(?=(sub|intro))
    beginCaptures:
      '1': {name: entity.name.type.ale}
    end: (\.)
    endCaptures:
      '1': {name: type.declaration.end.ale}
    patterns:
    - include: '#type_sub_declaration'
    - include: '#type_intro_declaration'

  type_sub_declaration:
    name: type.sub.declaration.ale
    begin: (sub)\s+(\[)
    beginCaptures:
      '1': {name: keyword.declaration.function.ale}
      '2': {name: type.sub.declaration.end.ale}
    end: (\])
    patterns:
    - include: '#included_type'

  included_type:
      name: constant.other.atom.simple.ale
      match: \b(\w+)\b

  type:
      name: type.name.ale
      match: \b(\w+)\b

  type_intro_declaration:
    name: type.intro.declaration.ale
    begin: (intro)\s+(\[)
    beginCaptures:
      '1': {name: keyword.declaration.function.ale}
      '2': {name: type.intro.declaration.end.ale}
    end: (\])
    patterns:
    - include: '#feature'

  feature:
    name: feature.ale
    begin: ([[:alpha:]_][[:alnum:]_]*)\s*(:)
    beginCaptures:
      '1': {name: support.type.ale}
      '2': {name: feature.separator.ale}
    end: (?=(,|]|\.|\b))
    patterns:
    - include: '#macro_call'
    - include: '#variable'
    - include: '#type'

  comments:
    patterns:
    - name: comment.line.note.ale
      match: (%+)\s*(BUG|FIXME|TODO).*$
      captures:
        '1': {name: punctuation.definition.comment.ale}
        '2': {name: comment.line.note.notation.ale}
    - name: comment.line.number-sign.ale
      match: (%+).*$
      captures:
        '1': {name: punctuation.definition.comment.ale}

  constant:
    name: constant.language.ale
    match: \b(true|bot|top)\b

  cut:
    name: keyword.other.cut.ale
    match: (!)

author: Frank Niu
bundleUUID: EB590797-FBEE-4BEA-A140-8339AFD2CE1B